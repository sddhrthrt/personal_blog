---
layout: post
title: "Trivia"
date: 2013-07-08 11:12
comments: true
categories: trivia technology
tags: 
 - optparse
 - argparse
 - sudo
 - ipython
 - tips
 - tipsntricks 
 - linux
 - python
---

There are many things that I find randomly on Internet that I want to remember.
Until I make an app to organize these bits of knowledge (wait, that might be a
worthy project in itself), I am going to store them here.

<!-- more -->
## iPython inside virtualenv

Launching iPython inside virtualenv creates problems - it doesn't obey the
restrictions placed by virtualenv about restricting itself inside the virtual
environment and tries to load packages from system library when you `import`
etc.

Here is how to launch it so it uses the correct Python version inside the
virtual environment, thanks to [Hatem Nassrat](https://coderwall.com/p/xdox9a).

```bash alias for iPython inside virtualenv
alias ipy="python -c 'import IPython;
IPython.frontend.terminal.ipapp.launch_new_instance()'"
```
## sudo -s

Gives root access even if you dont have the `root` username access.
I dont know how this works, I'll have to read up about it.

## NERDTree autoclose when file closed

[NERDTree](https://github.com/scrooloose/nerdtree) by Martin Grefnell is easily
one of the most performance-increasing vim plugins, causing you to be highly
productive. While there are several options that can make your life with
NERDTree easy, there is one thing that's not so straightforward.

When you close a file in vim, say there was NERDTree open in the side. It
remains open, and becomes the only open window in the vim instance, forcing you
to manually close that window too. While you *can* say `:wqa` and close all
windows, including NERDTree, you can also use this neat little trick to close
the NERDTree automatically on closing the last editor window:

``` bash put this in a single line in your ~/.vimrc
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
```
## Tab in vim

As followed by several programmers around the world, the best practices for
indenting code is, to have a 4-space tab. This makes code easy to read while not
causing too much indentation and as a result make it difficult to follow the
80-character width limit.

But vim's default is a 8-space tab, and it's not 8 spaces but a `\t` tab
character. To make this right, add this one line to your .vimrc:

``` bash put this in your ~/.vimrc
set tabstop=4 shiftwidth=4 expandtab
```

Obviously, here `expandtab` means split a tab into 4 spaces. `tabstop=4` makes
the tab's width 4, while `shiftwidth=4` causes the automatically inserted
indentation to also have 4 spaces.

## Screen session names

If you have a remote computer or if you connect to a remote computer, and use
screen over ssh, you might have noticed that it's a pain to track multiple
screen sessions - you have to remember the `pid`s - and you have to often open
every session one by one.

Here is the easiest way to manage that - 

To start a new session with a sessionname, just do 

``` bash new session with name "webAdmin"
screen -S webAdmin
```

To edit an existing session's name,

```bash edit session name of current session
C-a :
sessionname webAdmin
```

To list the existing screen sessions, you could 
```bash list sessions
sddhrthrt@bellakki:~$ screen -list
There are screens on:
32090.blog      (07/08/2013 11:26:26 AM)        (Detached)
8306.scrapy     (06/19/2013 09:40:55 AM)        (Detached)
15387.meteor    (06/10/2013 11:40:21 AM)        (Detached)
3 Sockets in /var/run/screen/S-sddhrthrt.
```

And finally, connect to either session by just:
```bash reattach to the session named "scrapy" 
screen -r scrapy
```
## Command line options parsing in Python

Just wrote a command-line python script and want to spread the happiness to
others by passing it on? If your last hurdle to this is adding ability to take
command line options like those (cool) shell scripts, [here is your solution](/blog/2013/07/16/option-parsing-in-python-scripts/).

## Extract link URLs from a webpage

How to extract all link URLs from a webpage? Here are two ways:

```bash list all links
cat index.html |\
    grep -o '<a .*href=.*>' | \
    sed -e 's/<a /\n<a /g' | \
    sed -e 's/<a .*href=['"'"'"]//' -e 's/["'"'"'].*$//' -e '/^$/ d'
```

Credits to
[Crisboot](http://stackoverflow.com/questions/1881237/easiest-way-to-extract-the-urls-from-an-html-page-using-sed-or-awk-only)'s
answer to a question. Now I am not entirely sure about every step of the
command, and I'm still understanding bits of that hugeass regex, so dont ask me.
But hey, this is meant to a (sort of) cookbook, so dont be too serious, just
copy paste. :P

Oh and a better solution, although tied to lynx, is:

``` bash list all links
lynx -dump -listonly
```

## Ctrl-R backwards history search in z-shell

Ever furiously tapped Ctrl-R in zsh hoping that reverse history search (the
awesome friend that helps when you forgot what magic command you used the last time)
and found it doesn't work? Turns out it's not bound to anything at all in vim
mode. So go to your `~/zshrc` and add this:

``` bash Ctrl-R search in zsh for reverse history search
bindkey "^R" history-incremental-search-backward
```


